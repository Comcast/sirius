From db9822e629deca2cd13cc40272f7598000e30537 Mon Sep 17 00:00:00 2001
From: ktomasette <kristofer_tomasette@comcast.com>
Date: Thu, 5 Jul 2012 15:45:48 -0400
Subject: [PATCH] add some logging so we can see bootstrapping a log happen

Change-Id: I0bdf220af12422ecb5e6f088d764aa7a0f0e2428
---
 .../impl/persistence/SiriusPersistenceActor.scala  |   24 ++++++++++++++-----
 1 files changed, 17 insertions(+), 7 deletions(-)

diff --git a/src/main/scala/com/comcast/xfinity/sirius/api/impl/persistence/SiriusPersistenceActor.scala b/src/main/scala/com/comcast/xfinity/sirius/api/impl/persistence/SiriusPersistenceActor.scala
index 92ba539..add0cfb 100644
--- a/src/main/scala/com/comcast/xfinity/sirius/api/impl/persistence/SiriusPersistenceActor.scala
+++ b/src/main/scala/com/comcast/xfinity/sirius/api/impl/persistence/SiriusPersistenceActor.scala
@@ -6,24 +6,34 @@ import com.comcast.xfinity.sirius.writeaheadlog.{LogData, SiriusLog}
 import com.comcast.xfinity.sirius.api.SiriusResult
 import akka.agent.Agent
 import com.comcast.xfinity.sirius.api.impl._
+import org.slf4j.LoggerFactory
 
 /**
  * {@link Actor} for persisting data to the write ahead log and forwarding
  * to the state worker.
  */
 class SiriusPersistenceActor(val stateActor: ActorRef, siriusLog: SiriusLog, siriusStateAgent: Agent[SiriusState])
-    extends Actor {
-  
+  extends Actor {
+  val logger = LoggerFactory.getLogger(classOf[SiriusPersistenceActor])
+
   override def preStart() {
-    siriusLog.foldLeft(()){
-      case (_, LogData("PUT", key, _, _, Some(body))) => stateActor ! Put(key, body)
-      case (_, LogData("DELETE", key, _, _, _)) => stateActor ! Delete(key)
+    logger.info("Bootstrapping Write Ahead Log")
+    siriusLog.foldLeft(()) {
+      case (_, LogData("PUT", key, _, _, Some(body))) => {
+        logger.debug("Read PUT from log: key={} --- body={}", key, body);
+        stateActor ! Put(key, body)
+      }
+      case (_, LogData("DELETE", key, _, _, _)) => {
+        logger.debug("Read DELETE from log: key={}", key);
+        stateActor ! Delete(key)
+      }
     }
+    logger.info("Done Bootstrapping Write Ahead Log")
     siriusStateAgent send ((state: SiriusState) => {
       state.updatePersistenceState(SiriusState.PersistenceState.Initialized)
     })
   }
-  
+
   def receive = {
     case OrderedEvent(sequence, timestamp, request) => {
       request match {
@@ -32,6 +42,6 @@ class SiriusPersistenceActor(val stateActor: ActorRef, siriusLog: SiriusLog, sir
       }
       stateActor forward request
     }
-    case _ : SiriusResult =>
+    case _: SiriusResult =>
   }
 }
\ No newline at end of file
-- 
1.7.1

